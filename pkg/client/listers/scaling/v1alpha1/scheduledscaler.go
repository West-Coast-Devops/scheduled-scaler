/*
Copyright West Coast DevOps

Author: Eric Uldall
Repo:   https://github.com/West-Coast-Devops/scheduled-scaler

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
	v1alpha1 "k8s.restdev.com/operators/pkg/apis/scaling/v1alpha1"
)

// ScheduledScalerLister helps list ScheduledScalers.
// All objects returned here must be treated as read-only.
type ScheduledScalerLister interface {
	// List lists all ScheduledScalers in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScheduledScaler, err error)
	// ScheduledScalers returns an object that can list and get ScheduledScalers.
	ScheduledScalers(namespace string) ScheduledScalerNamespaceLister
	ScheduledScalerListerExpansion
}

// scheduledScalerLister implements the ScheduledScalerLister interface.
type scheduledScalerLister struct {
	indexer cache.Indexer
}

// NewScheduledScalerLister returns a new ScheduledScalerLister.
func NewScheduledScalerLister(indexer cache.Indexer) ScheduledScalerLister {
	return &scheduledScalerLister{indexer: indexer}
}

// List lists all ScheduledScalers in the indexer.
func (s *scheduledScalerLister) List(selector labels.Selector) (ret []*v1alpha1.ScheduledScaler, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScheduledScaler))
	})
	return ret, err
}

// ScheduledScalers returns an object that can list and get ScheduledScalers.
func (s *scheduledScalerLister) ScheduledScalers(namespace string) ScheduledScalerNamespaceLister {
	return scheduledScalerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ScheduledScalerNamespaceLister helps list and get ScheduledScalers.
// All objects returned here must be treated as read-only.
type ScheduledScalerNamespaceLister interface {
	// List lists all ScheduledScalers in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ScheduledScaler, err error)
	// Get retrieves the ScheduledScaler from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ScheduledScaler, error)
	ScheduledScalerNamespaceListerExpansion
}

// scheduledScalerNamespaceLister implements the ScheduledScalerNamespaceLister
// interface.
type scheduledScalerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ScheduledScalers in the indexer for a given namespace.
func (s scheduledScalerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ScheduledScaler, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ScheduledScaler))
	})
	return ret, err
}

// Get retrieves the ScheduledScaler from the indexer for a given namespace and name.
func (s scheduledScalerNamespaceLister) Get(name string) (*v1alpha1.ScheduledScaler, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("scheduledscaler"), name)
	}
	return obj.(*v1alpha1.ScheduledScaler), nil
}
